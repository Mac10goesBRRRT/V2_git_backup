#####################################################################
#   Macros
#####################################################################


[gcode_macro G32]
gcode:   
      STATUS_HOMING
      G28
      Attach_Probe_Lock
      QUAD_GANTRY_LEVEL
      G28 Z
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------



   
[gcode_macro PRINT_START]
description: Prepares the Printer for a job
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    STATUS_HEATING
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}
    COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    M190 S{bedtemp}                ; set & wait for bed temp
    G32                            ; home all axes                                              
    M109 S170
    M117 Bed Mesh
    #BED_MESH_CALIBRATE
    Attach_Probe_Lock
    ADAPTIVE_BED_MESH
    Dock_Probe_Unlock
    G1 Z20 F3000                   ; move nozzle away from bed
    M109 S{hotendtemp}
    M117 Cleaning Nozzle
    CLEAN_NOZZLE
    M117 Calibrating Z
    CALIBRATE_Z
    G1 E45
    M117 Purge Line
    STATUS_PRINTING
    _PURGE_LINE
    M117
    UPDATE_DELAYED_GCODE ID=PROGRESS_BAR DURATION=1

   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    UPDATE_DELAYED_GCODE ID=PROGRESS_BAR DURATION=5
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    G1 E-40                        ; remove filament out of the Nozzlebreak for Revo Hotend
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY

[gcode_macro _PURGE_LINE]
description: Purges the filament out of the nozzle
gcode:
    SAVE_GCODE_STATE NAME=_PURGE_LINE
    #M109 S250
    G90                             ; absolute positioning
    M83                             ; relative extruder positioning
    G1 X100 Y1 Z0.4 F10000
    G1 X250 E20 F1000             ; intro line
    G1 E-0.5 Z5                 ; retract and nozzle lift
    _Park_Toolhead
    RESTORE_GCODE_STATE NAME=_PURGE_LINE

[gcode_macro _SHUTDOWN_PI]
gcode:
  {action_call_remote_method("shutdown_machine")}


[gcode_macro PRINTER_OFF]
description: Safely shuts down the Raspberry Pi
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        {action_respond_info("Printer not homed")}
    {% else %}
      _Park_Toolhead
      G90
      G0 Z100 F2000
      G4 P5000
      M400
    {% endif %}
    {% if printer["extruder"].temperature > 50 %}
    RESPOND TYPE=error MSG="Hotend still hot!"
    {% else %}
    _SHUTDOWN_PI
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  G1 E-40                        ; remove filament out of the Nozzlebreak for Revo Hotend
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
